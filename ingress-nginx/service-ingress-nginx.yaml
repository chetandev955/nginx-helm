apiVersion: v1
kind: Service
metadata:
  annotations:
    domainName: rakuten-dish.com
    external-dns.alpha.kubernetes.io/hostname: rakuten-dish.com
    external-dns.alpha.kubernetes.io/ttl: "60"
    meta.helm.sh/release-name: ingress-nginx
    meta.helm.sh/release-namespace: ingress-nginx
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: tcp
    service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: "3600"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-internal: "true"
    service.beta.kubernetes.io/aws-load-balancer-name: rakuten-dish-nlb
    service.beta.kubernetes.io/aws-load-balancer-ssl-negotiation-policy: ELBSecurityPolicy-TLS-1-2-2017-01
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: 9000,443
    service.beta.kubernetes.io/aws-load-balancer-type: nlb-ip
  creationTimestamp: "2021-08-12T07:13:05Z"
  finalizers:
  - service.kubernetes.io/load-balancer-cleanup
  - service.k8s.aws/resources
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/version: 0.48.1
    helm.sh/chart: ingress-nginx-3.35.0
  managedFields:
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:domainName: {}
          f:external-dns.alpha.kubernetes.io/hostname: {}
          f:external-dns.alpha.kubernetes.io/ttl: {}
          f:meta.helm.sh/release-name: {}
          f:meta.helm.sh/release-namespace: {}
          f:service.beta.kubernetes.io/aws-load-balancer-backend-protocol: {}
          f:service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: {}
          f:service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: {}
          f:service.beta.kubernetes.io/aws-load-balancer-internal: {}
          f:service.beta.kubernetes.io/aws-load-balancer-name: {}
          f:service.beta.kubernetes.io/aws-load-balancer-ssl-negotiation-policy: {}
          f:service.beta.kubernetes.io/aws-load-balancer-ssl-ports: {}
          f:service.beta.kubernetes.io/aws-load-balancer-type: {}
        f:labels:
          .: {}
          f:app.kubernetes.io/component: {}
          f:app.kubernetes.io/instance: {}
          f:app.kubernetes.io/managed-by: {}
          f:app.kubernetes.io/name: {}
          f:app.kubernetes.io/version: {}
          f:helm.sh/chart: {}
      f:spec:
        f:externalTrafficPolicy: {}
        f:ports:
          .: {}
          k:{"port":80,"protocol":"TCP"}:
            .: {}
            f:name: {}
            f:port: {}
            f:protocol: {}
            f:targetPort: {}
          k:{"port":443,"protocol":"TCP"}:
            .: {}
            f:name: {}
            f:port: {}
            f:protocol: {}
            f:targetPort: {}
        f:selector:
          .: {}
          f:app.kubernetes.io/component: {}
          f:app.kubernetes.io/instance: {}
          f:app.kubernetes.io/name: {}
        f:sessionAffinity: {}
        f:type: {}
    manager: helm
    operation: Update
    time: "2021-08-12T07:13:05Z"
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:finalizers:
          v:"service.kubernetes.io/load-balancer-cleanup": {}
    manager: kube-controller-manager
    operation: Update
    time: "2021-08-12T07:13:05Z"
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:finalizers:
          .: {}
          v:"service.k8s.aws/resources": {}
      f:status:
        f:loadBalancer:
          f:ingress: {}
    manager: controller
    operation: Update
    time: "2021-08-12T07:13:07Z"
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:spec:
        f:ports:
          k:{"port":32392,"protocol":"TCP"}:
            .: {}
            f:name: {}
            f:port: {}
            f:protocol: {}
            f:targetPort: {}
          k:{"port":32393,"protocol":"TCP"}:
            .: {}
            f:name: {}
            f:port: {}
            f:protocol: {}
            f:targetPort: {}
          k:{"port":32394,"protocol":"TCP"}:
            .: {}
            f:name: {}
            f:port: {}
            f:protocol: {}
            f:targetPort: {}
          k:{"port":32492,"protocol":"TCP"}:
            .: {}
            f:name: {}
            f:port: {}
            f:protocol: {}
            f:targetPort: {}
          k:{"port":32493,"protocol":"TCP"}:
            .: {}
            f:name: {}
            f:port: {}
            f:protocol: {}
            f:targetPort: {}
          k:{"port":32494,"protocol":"TCP"}:
            .: {}
            f:name: {}
            f:port: {}
            f:protocol: {}
            f:targetPort: {}
    manager: kubectl-edit
    operation: Update
    time: "2021-08-16T08:59:52Z"
  name: ingress-nginx-controller-internal
  namespace: ingress-nginx
  resourceVersion: "8057192"
  selfLink: /api/v1/namespaces/ingress-nginx/services/ingress-nginx-controller-internal
  uid: f53a3909-b67a-4ac2-bd74-8162e652110d
spec:
  clusterIP: 10.100.175.124
  externalTrafficPolicy: Local
  healthCheckNodePort: 31052
  ports:
  - name: http
    nodePort: 30657
    port: 80
    protocol: TCP
    targetPort: http
  - name: https
    nodePort: 31142
    port: 443
    protocol: TCP
    targetPort: https
  - name: kafka-port-0
    nodePort: 32597
    port: 32392
    protocol: TCP
    targetPort: kafka-port-0
  - name: kafka-port-1
    nodePort: 31372
    port: 32393
    protocol: TCP
    targetPort: kafka-port-1
  - name: kafka-port-2
    nodePort: 31373
    port: 32394
    protocol: TCP
    targetPort: kafka-port-2
  - name: kafka-ssl-0
    nodePort: 32512
    port: 32492
    protocol: TCP
    targetPort: kafka-ssl-0
  - name: kafka-ssl-1
    nodePort: 31438
    port: 32493
    protocol: TCP
    targetPort: kafka-ssl-1
  - name: kafka-ssl-2
    nodePort: 32313
    port: 32494
    protocol: TCP
    targetPort: kafka-ssl-2
  selector:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
  sessionAffinity: None
  type: LoadBalancer
status:
  loadBalancer:
    ingress:
    - hostname: rakuten-dish-nlb-a26c529446dd0de9.elb.us-west-2.amazonaws.com
